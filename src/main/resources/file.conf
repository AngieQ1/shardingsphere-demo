


#由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点。用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ds-master-$->{0..1}.t_user_$->{0..4}
#分片列名称
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column=id
#分片算法行表达式（好像只取最后两个数字进行分片）
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user_$->{id % 5}


#自增列名称，缺省表示不使用自增主键生成器
spring.shardingsphere.sharding.tables.t_user.key-generator.column=id
#自增列值生成器类型，缺省表示使用默认自增列值生成器。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID/LEAF_SEGMENT
spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE

#
#spring.shardingsphere.sharding.tables.user.database-strategy.hint.algorithm-class-name=

##绑定表规则列表 就是逻辑表名    t_user  代表了 user_0 1 2 3 4
#spring.shardingsphere.sharding.binding-tables=t_user
##未知配置
#spring.shardingsphere.sharding.broadcast-tables=t_config




#使用了mybatis-plus
mybatis-plus.mapper-locations= classpath*:mappers/*.xml
mybatis-plus.map-underscore-to-camel-case=true

