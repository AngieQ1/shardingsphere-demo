spring:
  application:
    name: sharding-jdbc-service

# sharding-jdbc数据源配置
  shardingsphere:
    datasource:
      names: m0,m1,m2
      m0:
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/user_db?useUnicode=true&characterEncoding=UTF8&serverTimezone=Hongkong
        username: root
        password: root
      m1:
        type: com.alibaba.druid.pool.DruidDataSource
        url: jdbc:mysql://localhost:3306/order_db_1?useUnicode=true&characterEncoding=UTF8&serverTimezone=Hongkong
        username: root
        password: root
      m2:
        type: com.zaxxer.hikari.HikariDataSource
        jdbcUrl: jdbc:mysql://localhost:3306/order_db_2?useUnicode=true&characterEncoding=UTF8&serverTimezone=Hongkong
        username: root
        password: root
    props:
      sql:
        show: true  # 显示sql
    sharding:
      tables:
        t_order:
          actual-data-nodes: m$->{1..2}.t_order_$->{1..3}   # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。
          key-generator:
            column: order_id  #自增列名称，缺省表示不使用自增主键生成器
            type: SNOWFLAKE #自增列值生成器类型，缺省表示使用默认自增列值生成器。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID/LEAF_SEGMENT
          database-strategy:
            inline:
              sharding-column: user_id  # 分库策略，以user_id为分片键，分片策略为user_id % 2 + 1，user_id为偶数时，操作m1
              algorithm-expression: m$->{user_id % 2 + 1} #分片算法行表达式
          table-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: t_order_$->{order_id % 3 + 1}
        t_user:
          actual-data-nodes: m0.t_user   # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。
#          key-generator:
#            column: user_id  #自增列名称，缺省表示不使用自增主键生成器
#            type: SNOWFLAKE #自增列值生成器类型，缺省表示使用默认自增列值生成器。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID/LEAF_SEGMENT
          table-strategy:
            inline:
              sharding-column: user_id
              algorithm-expression: t_user
      broadcast-tables: t_dict #公共表

  #      binding-tables: t_order

  #默认数据库分片策略，同分库策略
# spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=id
  #分片算法行表达式
# spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds-master-$->{id % 2}

# 日志级别配置
logging:
  level:
    com.pingan.mapper: debug
    druid.sql: debug
mybatis:
  configuration:
    map-underscore-to-camel-case: true